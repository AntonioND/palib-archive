[CommentBlock | Comment, Block]
/*****************************************************************************************
 *
 *
 *
 ****************************************************************************************/
|

[CommentCopyr | Comment, Bock & Copyright]
/*****************************************************************************************
 *
 *
 *  Copyright 2002+ by XXXXX
 *  All Rights Reserved.
 *
 *
 *  Version    Date          Author             Log
 *  --------------------------------------------------------------------------------------
 *  0.0        XXXXX         XXXXX              Inital Release
 *
 ****************************************************************************************/
|

[CommentDoxyGen | Comment, DoxyGen Compatible]
/*!
\brief |Brief description

\param
\param
\param

\return

More detailed description here ....

\sa prototypename(void)
*/


[CommentVHAM | Comment, Created by using Visual HAM]
/*
 * This document has been created by using Visual HAM
 * http://www.console-dev.de
 *
 *
*/

[StartIntVbl | HAM, Start Interrupt VBL]
// Will, once activated, trigger the specified interrupt
// and then call the function specified
ham_StartIntHandler(INT_TYPE_VBL,         // The Interrupts ID you want to start.
                    (void *)&|vblFunc);    // The adress of a function that should be called when the interrupt is fired

[StartIntHbl | HAM, Start Interrupt HBL]
// Will, once activated, trigger the specified interrupt
// and then call the function specified
ham_StartIntHandler(INT_TYPE_HBL,         // The Interrupts ID you want to start.
                    (void *)&|hblFunc);    // The adress of a function that should be called when the interrupt is fired

[KrawallInitStart | Krawall, Init & Start Krawall]
// Do not forget to call kramWorker() each VBL
// Call this function once at startup
kragInit(KRAG_INIT_STEREO);

// Will, once activated, trigger the specified interrupt,
// and then call the function specified
ham_StartIntHandler(INT_TYPE_TIM1,&kradInterrupt);

// Start Module
krapPlay(&mod_|???, KRAP_MODE_LOOP, 0);

[KrawallInit | Krawall, Init Krawall]
// Do not forget to call kramWorker() each VBL
// Call this function once at startup
kragInit(KRAG_INIT_STEREO);

// Will, once activated, trigger the specified interrupt,
// and then call the function specified
ham_StartIntHandler(INT_TYPE_TIM1,&kradInterrupt);


[SetAlphablend | HAM, Set Alphablend]
// Set the affected layers for alpha blending and tranparency.
ham_SetFxMode(FX_LAYER_SELECT(|0,0,0,0,0,0),     // Source layer (BG0, BG1, BG2, BG3, OBJ, Backdrop)
              FX_LAYER_SELECT(0,0,0,0,0,0),     // Target layer (BG0, BG1, BG2, BG3, OBJ, Backdrop)
              FX_MODE_ALPHABLEND);              // Effect mode

// Set the intensity of the source and target layer
ham_SetFxAlphaLevel(16,                         // Source intensity
                    16);                        // Target intensity


[ham_SetFxMode | HAM, ham_SetFxMode]
// Set the affected layers for alpha blending and tranparency.
ham_SetFxMode(FX_LAYER_SELECT(|0,0,0,0,0,0),     // Source layer (BG0, BG1, BG2, BG3, OBJ, Backdrop)
              FX_LAYER_SELECT(0,0,0,0,0,0),     // Target layer (BG0, BG1, BG2, BG3, OBJ, Backdrop)
              FX_MODE_ALPHABLEND);              // Effect mode


[ham_LoadObjPal | HAM, ham_LoadObjPal]
// Load color palette into OBJ (Sprite) palette
ham_LoadObjPal((void *)&|_Palette,           // Pointer to the palette color data
               SIZEOF_16BIT(???_Palette));   // Number of colors to load from color 0 on

[ham_LoadObjPal16 | HAM, ham_LoadObjPal16]
// Load full 256 color palette into OBJ (Sprite) palette
ham_LoadObjPal16((void *)&|_Palette,   // Pointer to the palette color data
                 ???);              // The 16 color palette number you want to modify (0..15)

[ham_LoadObjPal256 | HAM, ham_LoadObjPal256]
// Load full 256 color palette into OBJ (Sprite) palette
ham_LoadObjPal256((void *)&|_Palette);


[ham_CreateObj | HAM, ham_CreateObj]
| = ham_CreateObj((void*)&???_Bitmap,  // A pointer to the tile data for this object
                     OBJ_SIZE_?????,      // obj_shape & obj_size
                     OBJ_MODE_NORMAL,     // obj_mode
                     1,                   // col_mode (1=256 colors)
                     0,                   // pal_no
                     0,                   // mosaic
                     0,                   // hflip
                     0,                   // vflip
                     0,                   // dbl_size
                     0,                   // prio
                     240,                 // x position of sprite on screen
                     0);                  // y position of sprite on screen

[ham_LoadBgPal | HAM, ham_LoadBgPal]
// Load new colors into the 256 color BG palette
ham_LoadBgPal((void *)&|_Palette, SIZEOF_16BIT(???_Palette));

[ham_LoadBgPal16 | HAM, ham_LoadBgPal16]
// Load new colors into one 16 color BG palette
ham_LoadObjPal16((void *)&|_Palette,   // Pointer to the palette color data
                 pal_no);              // The 16 color palette number you want to modify (0..15)

[ham_LoadBgPal256 | HAM, ham_LoadBgPal256]
// Load full 256 color palette into BG palette
ham_LoadObjPal256((void *)&|_Palette);


[StartProfiler | HAM, Start Profiler]
// Do not forget to call TOOL_PROFILER_INIT at the top of this file!
TOOL_PROFILER_START
|
TOOL_PROFILER_END





[TSprite | General, Struct, TSprite]
typedef struct
{
   u8  ObjNo;
   s16 X, Y;
}TSprite, *PSprite;

[TPoint | General, Struct, TPoint]
typedef struct
{
   s16 X, Y;
}TPoint, *PPoint;

[TLine | General, Struct, TLine]
typedef struct
{
   s16 X0, Y0, X1, Y1;
}TLine, *PLine;

[Class | General, Class]
class C|
{
   private:

   protected:

   public:

};


[Fori | General, For-Loop, Increase]
for(i=0; i<|; i++)
{

}

[Ford | General, For-Loop, Decrease]
for(i=|; i>0; i--)
{

}

[While | General, While-Loop]
while(1)
{

}

[Switch | General, Switch]
switch(|)
{
	case :
		   break;

	case :
		   break;

	default:
		   break;
}

[Header | General, Header]
/*****************************************************************************************
 *
 *
 *  Copyright 2002+ by XXXXX
 *  All Rights Reserved.
 *
 *
 *  Version    Date          Author             Log
 *  --------------------------------------------------------------------------------------
 *  0.0        XXXXX         XXXXX              Inital Release
 *
 ****************************************************************************************/
#ifndef |_H
#define _H

#include <mygba.h>



#endif /* _H */


/* END OF FILE */


[Source | General, Source]
#include "|.h"












/* END OF FILE */