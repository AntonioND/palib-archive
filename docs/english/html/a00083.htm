<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>PAlib: Sprite system</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>Sprite system</h1><table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga9af951fe9c7c3faca32d0a1e039ec8be"></a><!-- doxytag: member="Sprite::PA_UpdateOAM0" ref="ga9af951fe9c7c3faca32d0a1e039ec8be" args="()" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga9af951fe9c7c3faca32d0a1e039ec8be">PA_UpdateOAM0</a>()&nbsp;&nbsp;&nbsp;DMA_Copy((void*)PA_obj, (void*)OAM0, 256, DMA_32NOW)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Update the sprite infos for screen 0 only. Do this in the VBL. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gaeafedd78475febc931b34aeba95c2f14"></a><!-- doxytag: member="Sprite::PA_UpdateOAM1" ref="gaeafedd78475febc931b34aeba95c2f14" args="()" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaeafedd78475febc931b34aeba95c2f14">PA_UpdateOAM1</a>()&nbsp;&nbsp;&nbsp;DMA_Copy((void*)PA_obj + 256, (void*)OAM1, 256, DMA_32NOW)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Update the sprite infos for screen 1 only. Do this in the VBL. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga1c44c32e4774169e2397ea7889ca6436">PA_UpdateSpriteGfx</a>(screen, obj_number, obj_data)&nbsp;&nbsp;&nbsp;PA_UpdateGfx(screen, PA_GetSpriteGfx(screen, obj_number), obj_data)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Update the Gfx of a given sprite.  <a href="#ga1c44c32e4774169e2397ea7889ca6436"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga07261631ed2d033e15fc1557e386ffe4">PA_SetSpriteRotEnable</a>(screen, sprite, rotset)&nbsp;&nbsp;&nbsp;do{PA_obj[screen][sprite].atr0 |= OBJ_ROT;  PA_obj[screen][sprite].atr1 = (PA_obj[screen][sprite].atr1 &amp; ALL_BUT_ROTSET) + ((rotset) &lt;&lt; 9);}while(0)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate and zoom a sprite.  <a href="#ga07261631ed2d033e15fc1557e386ffe4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaf3c02384ab8e196fb1959f9390fd746d">PA_SetSpriteRotDisable</a>(screen, sprite)&nbsp;&nbsp;&nbsp;do{PA_obj[screen][sprite].atr0 &amp;= ALL_BUT(OBJ_ROT);  PA_obj[screen][sprite].atr1 &amp;= ALL_BUT_ROTSET;}while(0)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Stop rotating and zooming a sprite.  <a href="#gaf3c02384ab8e196fb1959f9390fd746d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga4bf93eaa77e6e533cc05f873a35bb95a">PA_SetSpriteX</a>(screen, obj, x)&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr1 = (PA_obj[screen][obj].atr1 &amp; ALL_BUT(PA_OBJ_X)) + ((x) &amp; PA_OBJ_X)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the X position of a sprite on screen.  <a href="#ga4bf93eaa77e6e533cc05f873a35bb95a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga353097a994619fb54e46b8fff6eb15ca">PA_GetSpriteX</a>(screen, obj)&nbsp;&nbsp;&nbsp;(PA_obj[screen][obj].atr1 &amp; (PA_OBJ_X))</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the X position of a sprite on screen.  <a href="#ga353097a994619fb54e46b8fff6eb15ca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaced1fba7a40575fe1b7794b45255d5e9">PA_SetSpriteY</a>(screen, obj, y)&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr0 = (PA_obj[screen][obj].atr0 &amp; ALL_BUT(PA_OBJ_Y)) + ((y) &amp; PA_OBJ_Y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the Y position of a sprite on screen.  <a href="#gaced1fba7a40575fe1b7794b45255d5e9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gabe6706a941e65ac879edb4c0422967bb">PA_GetSpriteY</a>(screen, obj)&nbsp;&nbsp;&nbsp;(PA_obj[screen][obj].atr0 &amp; PA_OBJ_Y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the Y position of a sprite on screen.  <a href="#gabe6706a941e65ac879edb4c0422967bb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga9c4155c5f3cbd7fed697e992766ba8f0">PA_SetSpritePal</a>(screen, obj, pal)&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr2 = (PA_obj[screen][obj].atr2 &amp; ALL_BUT_PAL) + ((pal) &lt;&lt; 12)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the sprite's palette number.  <a href="#ga9c4155c5f3cbd7fed697e992766ba8f0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gac9886ffb71301524b7302f6bff6a2435">PA_GetSpritePal</a>(screen, obj)&nbsp;&nbsp;&nbsp;(PA_obj[screen][obj].atr2 &gt;&gt; 12)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get thepalette used by a sprite.  <a href="#gac9886ffb71301524b7302f6bff6a2435"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gae104c411fd7a04ad6265a85d48ddc3a5">PA_SetSpriteDblsize</a>(screen, obj, dblsize)&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr0 = (PA_obj[screen][obj].atr0 &amp; ALL_BUT(DBLSIZE)) + ((dblsize) &lt;&lt; 9)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable double size for a given sprite.  <a href="#gae104c411fd7a04ad6265a85d48ddc3a5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gafc0ed987ebc8f23b0f2ae49826f3dab8">PA_GetSpriteDblsize</a>(screen, obj)&nbsp;&nbsp;&nbsp;((PA_obj[screen][obj].atr0 &amp; DBLSIZE) &gt;&gt; 9)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the double size state for a given sprite.  <a href="#gafc0ed987ebc8f23b0f2ae49826f3dab8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga26e67beb53eebad5aaa121d426a5984d">PA_SetSpriteColors</a>(screen, sprite, n_colors)&nbsp;&nbsp;&nbsp;PA_obj[screen][sprite].atr0 = (PA_obj[screen][sprite].atr0 &amp; ALL_BUT(N_COLORS)) + ((n_colors) &lt;&lt; 13)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the sprite's color mode.  <a href="#ga26e67beb53eebad5aaa121d426a5984d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gad89fdbc2bddda4c51e91e2ba388ce484">PA_GetSpriteColors</a>(screen, sprite)&nbsp;&nbsp;&nbsp;((PA_obj[screen][sprite].atr0 &amp; N_COLORS) &gt;&gt; 13)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get a sprite's color mode.  <a href="#gad89fdbc2bddda4c51e91e2ba388ce484"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga8e36dc74210832c38f6bf6864344f7a6">PA_SetSpriteMode</a>(screen, sprite, obj_mode)&nbsp;&nbsp;&nbsp;PA_obj[screen][sprite].atr0 = (PA_obj[screen][sprite].atr0 &amp; ALL_BUT(OBJ_MODE)) + ((obj_mode) &lt;&lt; 10)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the sprite's mode : 0 for normal, 1 for alpha blending, 2 for window.  <a href="#ga8e36dc74210832c38f6bf6864344f7a6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga8eade41cc18bc24efbda6a25703cce3d">PA_GetSpriteMode</a>(screen, obj)&nbsp;&nbsp;&nbsp;((PA_obj[screen][obj].atr0 &amp; OBJ_MODE) &gt;&gt; 10)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the sprite's mode : 0 for normal, 1 for alpha blending, 2 for window.  <a href="#ga8eade41cc18bc24efbda6a25703cce3d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga1257268cb4fd90c31da4f2eaac4f5540">PA_SetSpriteMosaic</a>(screen, obj, mosaic)&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr0 = (PA_obj[screen][obj].atr0 &amp; ALL_BUT(OBJ_MOSAIC)) + ((mosaic) &lt;&lt; 12)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable mosaic mode for a given sprite.  <a href="#ga1257268cb4fd90c31da4f2eaac4f5540"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaf7007fc7025218586ca19aec5e2dd5b6">PA_GetSpriteMosaic</a>(screen, obj)&nbsp;&nbsp;&nbsp;((PA_obj[screen][obj].atr0 &amp; OBJ_MOSAIC) &gt;&gt; 12)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the mosaic mode for a given sprite.  <a href="#gaf7007fc7025218586ca19aec5e2dd5b6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga641750a4e110a0baf38906fb3082a51d">PA_SetSpriteHflip</a>(screen, obj, hflip)&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr1 = (PA_obj[screen][obj].atr1 &amp; ALL_BUT(OBJ_HFLIP)) + ((hflip) &lt;&lt; 12)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable horizontal flip for a given sprite.  <a href="#ga641750a4e110a0baf38906fb3082a51d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga953acb0052af2a3ac0f6e375295fdb85">PA_GetSpriteHflip</a>(screen, obj)&nbsp;&nbsp;&nbsp;((PA_obj[screen][obj].atr1 &amp; OBJ_HFLIP) &gt;&gt; 12)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the horizontal flip state for a given sprite.  <a href="#ga953acb0052af2a3ac0f6e375295fdb85"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga1613e9822383100508d2e5cbdeb1e774">PA_SetSpriteVflip</a>(screen, obj, vflip)&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr1 = (PA_obj[screen][obj].atr1 &amp; ALL_BUT(OBJ_VFLIP)) + ((vflip) &lt;&lt; 13)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable vertical flip for a given sprite.  <a href="#ga1613e9822383100508d2e5cbdeb1e774"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga3855089c9cf41b39babe471ff20e8a2c">PA_GetSpriteVflip</a>(screen, obj)&nbsp;&nbsp;&nbsp;((PA_obj[screen][obj].atr1 &amp; OBJ_VFLIP) &gt;&gt; 13)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the vertical flip state for a given sprite.  <a href="#ga3855089c9cf41b39babe471ff20e8a2c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gac0a3dab3f8cd7458a2c6bac496f11457">PA_SetSpriteGfx</a>(screen, obj, gfx)&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr2 = (PA_obj[screen][obj].atr2 &amp; ALL_BUT(OBJ_GFX)) + ((gfx) &amp; OBJ_GFX)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the gfx used by a sprite.  <a href="#gac0a3dab3f8cd7458a2c6bac496f11457"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga3909b4feb83bc29337e3d9ea8999aa5d">PA_GetSpriteGfx</a>(screen, obj)&nbsp;&nbsp;&nbsp;(PA_obj[screen][obj].atr2 &amp; OBJ_GFX)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the gfx used by a sprite.  <a href="#ga3909b4feb83bc29337e3d9ea8999aa5d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga89eae5f07d1eadd3c14dde5c8fe56a5d">PA_SetSpritePrio</a>(screen, obj, prio)&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr2 = (PA_obj[screen][obj].atr2 &amp; ALL_BUT(OBJ_PRIO)) + ((prio) &lt;&lt; 10)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set a sprite's Background priority.  <a href="#ga89eae5f07d1eadd3c14dde5c8fe56a5d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gae9f78a08ec4ce948cbf77cdd5486cd29">PA_GetSpritePrio</a>(screen, obj)&nbsp;&nbsp;&nbsp;((PA_obj[screen][obj].atr2 &amp; OBJ_PRIO) &gt;&gt; 10)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get a sprite's Background priority.  <a href="#gae9f78a08ec4ce948cbf77cdd5486cd29"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga8b3a167e67ef84d36ce6b8a1d100c1ef">PA_GetSpriteLx</a>(screen, sprite)&nbsp;&nbsp;&nbsp;PA_size[PA_obj[screen][sprite].atr0 &gt;&gt; 14][PA_obj[screen][sprite].atr1 &gt;&gt; 14].lx</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get a sprite's length.  <a href="#ga8b3a167e67ef84d36ce6b8a1d100c1ef"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga6eb6db7837dfc5b7c7aefb30e0f4f680">PA_GetSpriteLy</a>(screen, sprite)&nbsp;&nbsp;&nbsp;PA_size[PA_obj[screen][sprite].atr0 &gt;&gt; 14][PA_obj[screen][sprite].atr1 &gt;&gt; 14].ly</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get a sprite's height.  <a href="#ga6eb6db7837dfc5b7c7aefb30e0f4f680"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gabd11e15d7f6a467c62fbd99b3e1376a5">PA_CloneSprite</a>(screen, obj, target)&nbsp;&nbsp;&nbsp;do{PA_obj[screen][obj].atr0 = PA_obj[screen][target].atr0; PA_obj[screen][obj].atr1 = PA_obj[screen][target].atr1; PA_obj[screen][obj].atr2 = PA_obj[screen][target].atr2; ++obj_per_gfx[screen][PA_GetSpriteGfx(screen, target)];}while(0)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clone a sprite. Works only for sprites on the same screen.  <a href="#gabd11e15d7f6a467c62fbd99b3e1376a5"></a><br/></td></tr>
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga00ec06b6dcb233eff61098743018cd4a"></a><!-- doxytag: member="Sprite::PA_UpdateOAM" ref="ga00ec06b6dcb233eff61098743018cd4a" args="(void)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga00ec06b6dcb233eff61098743018cd4a">PA_UpdateOAM</a> (void)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Update the sprite infos for both screens. Do this in the VBL. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">u16&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga13cf9bfdba81fd1db52c36657c86a485">PA_CreateGfx</a> (u8 screen, void *obj_data, u8 obj_shape, u8 obj_size, u8 color_mode)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Load in mémory a gfx to use later on for a sprite. Returns the gfx's number in memory.  <a href="#ga13cf9bfdba81fd1db52c36657c86a485"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ga7c97c5d0c410350615f4bc46f8b3fadf"></a><!-- doxytag: member="Sprite::PA_ResetSpriteSys" ref="ga7c97c5d0c410350615f4bc46f8b3fadf" args="(void)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga7c97c5d0c410350615f4bc46f8b3fadf">PA_ResetSpriteSys</a> (void)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Reset the sprite system, memory, etc... <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga05570138656aa3a73734aca8919c1238">PA_CreateSprite</a> (u8 screen, u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a sprite with it's gfx. This is the simple version of the function.  <a href="#ga05570138656aa3a73734aca8919c1238"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga3b0f095178b1e1acae2f1d20eec8872d">PA_CreateSpriteEx</a> (u8 screen, u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, u8 obj_mode, u8 mosaic, u8 hflip, u8 vflip, u8 prio, u8 dblsize, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a sprite with it's gfx. This is the complex version of the function.  <a href="#ga3b0f095178b1e1acae2f1d20eec8872d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaa072e101af8b55bf5b3acd763a760f0e">PA_Create16bitSpriteEx</a> (u8 screen, u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, u8 mosaic, u8 hflip, u8 vflip, u8 prio, u8 dblsize, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a 16 bit sprite with it's gfx. This is the complex version of the function. Warning : a 16bit sprite MUST be 128 pixels large, even if you sprite only takes up a small part on the left...  <a href="#gaa072e101af8b55bf5b3acd763a760f0e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga2cba920c548e6ff70d5109f1c4d5d8a7">PA_Create16bitSpriteFromGfx</a> (u8 screen, u8 obj_number, u16 gfx, u8 obj_shape, u8 obj_size, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a 16 bit sprite using a given gfx.  <a href="#ga2cba920c548e6ff70d5109f1c4d5d8a7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gab85ac8d33f4ae13239d7a0695d061bbd">PA_Create16bitSprite</a> (u8 screen, u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a 16 bit sprite with it's gfx. This is the simple version of the function. Warning : a 16bit sprite MUST be 128 pixels large, even if you sprite only takes up a small part on the left...  <a href="#gab85ac8d33f4ae13239d7a0695d061bbd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gada596d72c45c5a13ebbc43ebb0eab2bd">PA_CreateSpriteFromGfx</a> (u8 screen, u8 obj_number, u16 obj_gfx, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a sprite with it's gfx. This is the simple version of the function.  <a href="#gada596d72c45c5a13ebbc43ebb0eab2bd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga7dca775c46a92ce757d7e66eef3519a0">PA_CreateSpriteExFromGfx</a> (u8 screen, u8 obj_number, u16 obj_gfx, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, u8 obj_mode, u8 mosaic, u8 hflip, u8 vflip, u8 prio, u8 dblsize, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a sprite with it's gfx. This is the complex version of the function.  <a href="#ga7dca775c46a92ce757d7e66eef3519a0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga88e16910768adeb8056bb60d2d29f891">PA_UpdateGfx</a> (u8 screen, u16 gfx_number, void *obj_data)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Update a given Gfx.  <a href="#ga88e16910768adeb8056bb60d2d29f891"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga23a2c8037e2019ce5037b33bce6d4577">PA_UpdateGfxAndMem</a> (u8 screen, u8 gfx_number, void *obj_data)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Update the Gfx of a given sprite and updates the PAlib animation pointer... Only for advanced users.  <a href="#ga23a2c8037e2019ce5037b33bce6d4577"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gacbfc3e66ceaa548e28899810ae08d26c">PA_DeleteGfx</a> (u8 screen, u16 obj_gfx)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Delete a given Gfx. If a sprite uses this gfx, it'll become invisible.  <a href="#gacbfc3e66ceaa548e28899810ae08d26c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga3b88f09871c225c80273a8d4a55c37f2">PA_DeleteSprite</a> (u8 screen, u8 obj_number)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Delete a given sprite. If it is the only one to use it's gfx, it'll be deleted too.  <a href="#ga3b88f09871c225c80273a8d4a55c37f2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga96c55f780814e3795091d5f2f19039dc">PA_SetRotset</a> (u8 screen, u8 rotset, s16 angle, u16 zoomx, u16 zoomy)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate and zoom a sprite.  <a href="#ga96c55f780814e3795091d5f2f19039dc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga1b4c5e9c99eb920e7dfea8655ffb7e26">PA_SetRotsetNoZoom</a> (u8 screen, u8 rotset, s16 angle)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate a sprite without zooming. It's a bit faster than the normal PA_SetRotset function.  <a href="#ga1b4c5e9c99eb920e7dfea8655ffb7e26"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga8ea10687078034829fa34f6c0ba94230">PA_SetRotsetNoAngle</a> (u8 screen, u8 rotset, u16 zoomx, u16 zoomy)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Zoom a sprite without rotating. It's a bit faster than the normal PA_SetRotset function.  <a href="#ga8ea10687078034829fa34f6c0ba94230"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaef15696c0dd605ad75a62cbd65c7b29e">PA_SetSpriteXY</a> (u8 screen, u8 sprite, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the X and Y position of a sprite on screen.  <a href="#gaef15696c0dd605ad75a62cbd65c7b29e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga33716b4c909e9c4bdd1437bb0609061e">PA_Set16bitSpriteAlpha</a> (u8 screen, u8 sprite, u8 alpha)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the X position of a sprite on screen.  <a href="#ga33716b4c909e9c4bdd1437bb0609061e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gac509a7d706fcc58b51c111fdf2da1717">PA_SetSpriteAnimEx</a> (u8 screen, u8 sprite, u8 lx, u8 ly, u8 ncolors, s16 animframe)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the animation frame for a given sprite. This function is faster than the normal PA_SetSpriteAnim because it doesn't have to lookup the sprite dimensions...  <a href="#gac509a7d706fcc58b51c111fdf2da1717"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaf1cffc1e800370adf500daebffe25a69">PA_SetSpriteAnim</a> (u8 screen, u8 sprite, s16 animframe)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the animation frame for a given sprite. Same as PA_SetSpriteAnimEx, but a bit slower and easier to use...  <a href="#gaf1cffc1e800370adf500daebffe25a69"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gafa1f236952d1e40c23193851c0b46ccd">PA_StartSpriteAnimEx</a> (u8 screen, u8 sprite, s16 firstframe, s16 lastframe, s16 speed, u8 type, s16 ncycles)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Start a sprite animation. Once started, it continues on and on by itself until you stop it !  <a href="#gafa1f236952d1e40c23193851c0b46ccd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaca4b18fa7d37c2744d57fc5da5835e85">PA_StartSpriteAnim</a> (u8 screen, u8 sprite, s16 firstframe, s16 lastframe, s16 speed)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Start a sprite animation. Once started, it continues on and on by itself until you stop it !  <a href="#gaca4b18fa7d37c2744d57fc5da5835e85"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaefe061359c24cf2588e01b200b371b5c">PA_StopSpriteAnim</a> (u8 screen, u8 sprite)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Stop a sprite animation.  <a href="#gaefe061359c24cf2588e01b200b371b5c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaff827bf845286008236f274b37ee9097">PA_SetSpriteAnimFrame</a> (u8 screen, u8 sprite, u16 frame)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the current animation frame number.  <a href="#gaff827bf845286008236f274b37ee9097"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static u16&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga463e0bc7b7e19b60269325683db64175">PA_GetSpriteAnimFrame</a> (u8 screen, u8 sprite)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the current animation frame number.  <a href="#ga463e0bc7b7e19b60269325683db64175"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga43148441badd806ed1594f667b209c3b">PA_SetSpriteAnimSpeed</a> (u8 screen, u8 sprite, s16 speed)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the current animation speed.  <a href="#ga43148441badd806ed1594f667b209c3b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static u16&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga002e5018b8bf9d4ad7d1dfa767582bb7">PA_GetSpriteAnimSpeed</a> (u8 screen, u8 sprite)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the current animation speed.  <a href="#ga002e5018b8bf9d4ad7d1dfa767582bb7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga6eab2231b721179cb937b35ee9a35f0c">PA_SetSpriteNCycles</a> (u8 screen, u8 sprite, s32 NCycles)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the current animation cycles left (-1 for inifinite loop).  <a href="#ga6eab2231b721179cb937b35ee9a35f0c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static s32&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaaa6f8dcb3b353b6b15c480da76e69264">PA_GetSpriteNCycles</a> (u8 screen, u8 sprite)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the current number of animation cycles left.  <a href="#gaaa6f8dcb3b353b6b15c480da76e69264"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaf68e20aaed1ee31181d26941497ca9ec">PA_SpriteAnimPause</a> (u8 screen, u8 sprite, u8 pause)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Pause or UnPause a sprite animation.  <a href="#gaf68e20aaed1ee31181d26941497ca9ec"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gad40eed67710c43a29b26e962a7f124cc">PA_SetSpritePixel</a> (u8 screen, u8 sprite, u8 x, u8 y, u8 color)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set a sprite's pixel to a given palette color. Like PA_SetSpritePixelEx, with less options, but a little slower.  <a href="#gad40eed67710c43a29b26e962a7f124cc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static u8&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gaba5d15cacf2e1d249f6a58f7c7d762b5">PA_GetSpritePixel</a> (u8 screen, u8 sprite, u8 x, u8 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get a sprite's pixel color. Like PA_GetSpritePixelEx, with less options, but a little slower.  <a href="#gaba5d15cacf2e1d249f6a58f7c7d762b5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static u8&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga35441e6e7c0dba9729f158fdd2dc0f7a">PA_GetSprite16cPixel</a> (u8 screen, u8 sprite, u8 x, u8 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get a 16 color sprite's pixel color.  <a href="#ga35441e6e7c0dba9729f158fdd2dc0f7a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gacb883c2266c143cded7f6ba59dedc748">PA_InitSpriteDraw</a> (u8 screen, u8 sprite)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Initialise a sprite to be able to draw on it !  <a href="#gacb883c2266c143cded7f6ba59dedc748"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="gacc604bb9664245ddba8088460a798e9b"></a><!-- doxytag: member="Sprite::PA_InitAllSpriteDraw" ref="gacc604bb9664245ddba8088460a798e9b" args="(void)" -->
static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#gacc604bb9664245ddba8088460a798e9b">PA_InitAllSpriteDraw</a> (void)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Initialise all the onscreen sprites to draw on them. <br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00083.htm#ga20c40365581c33a701a95870432f97c7">PA_InitSpriteExtPrio</a> (u8 SpritePrio)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable the PAlib sprite priority system. Slower than the normal priority system, but offering 256 levels of priority for the sprites (overrides the sprite number's priority).  <a href="#ga20c40365581c33a701a95870432f97c7"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Load Sprite, move them around, rotate them... </p>
<hr/><h2>Define Documentation</h2>
<a class="anchor" id="ga1c44c32e4774169e2397ea7889ca6436"></a><!-- doxytag: member="PA_Sprite.h::PA_UpdateSpriteGfx" ref="ga1c44c32e4774169e2397ea7889ca6436" args="(screen, obj_number, obj_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_UpdateSpriteGfx</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj_number, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj_data&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_UpdateGfx(screen, PA_GetSpriteGfx(screen, obj_number), obj_data)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Update the Gfx of a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga07261631ed2d033e15fc1557e386ffe4"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteRotEnable" ref="ga07261631ed2d033e15fc1557e386ffe4" args="(screen, sprite, rotset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpriteRotEnable</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">sprite, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">rotset&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;do{PA_obj[screen][sprite].atr0 |= OBJ_ROT;  PA_obj[screen][sprite].atr1 = (PA_obj[screen][sprite].atr1 &amp; ALL_BUT_ROTSET) + ((rotset) &lt;&lt; 9);}while(0)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Rotate and zoom a sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Sprite you want to rotate </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rotset</em>&nbsp;</td><td>Rotset you want to give to that sprite (0-31). You can apparently use a rotset for multiple sprites if zoomed/rotated identically... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaf3c02384ab8e196fb1959f9390fd746d"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteRotDisable" ref="gaf3c02384ab8e196fb1959f9390fd746d" args="(screen, sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpriteRotDisable</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">sprite&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;do{PA_obj[screen][sprite].atr0 &amp;= ALL_BUT(OBJ_ROT);  PA_obj[screen][sprite].atr1 &amp;= ALL_BUT_ROTSET;}while(0)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Stop rotating and zooming a sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Sprite you want to rotate </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga4bf93eaa77e6e533cc05f873a35bb95a"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteX" ref="ga4bf93eaa77e6e533cc05f873a35bb95a" args="(screen, obj, x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpriteX</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">x&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr1 = (PA_obj[screen][obj].atr1 &amp; ALL_BUT(PA_OBJ_X)) + ((x) &amp; PA_OBJ_X)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the X position of a sprite on screen. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga353097a994619fb54e46b8fff6eb15ca"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteX" ref="ga353097a994619fb54e46b8fff6eb15ca" args="(screen, obj)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpriteX</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;(PA_obj[screen][obj].atr1 &amp; (PA_OBJ_X))</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the X position of a sprite on screen. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaced1fba7a40575fe1b7794b45255d5e9"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteY" ref="gaced1fba7a40575fe1b7794b45255d5e9" args="(screen, obj, y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpriteY</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">y&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr0 = (PA_obj[screen][obj].atr0 &amp; ALL_BUT(PA_OBJ_Y)) + ((y) &amp; PA_OBJ_Y)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the Y position of a sprite on screen. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gabe6706a941e65ac879edb4c0422967bb"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteY" ref="gabe6706a941e65ac879edb4c0422967bb" args="(screen, obj)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpriteY</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;(PA_obj[screen][obj].atr0 &amp; PA_OBJ_Y)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the Y position of a sprite on screen. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga9c4155c5f3cbd7fed697e992766ba8f0"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpritePal" ref="ga9c4155c5f3cbd7fed697e992766ba8f0" args="(screen, obj, pal)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpritePal</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">pal&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr2 = (PA_obj[screen][obj].atr2 &amp; ALL_BUT_PAL) + ((pal) &lt;&lt; 12)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the sprite's palette number. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pal</em>&nbsp;</td><td>Palette number (0 - 15) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gac9886ffb71301524b7302f6bff6a2435"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpritePal" ref="gac9886ffb71301524b7302f6bff6a2435" args="(screen, obj)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpritePal</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;(PA_obj[screen][obj].atr2 &gt;&gt; 12)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get thepalette used by a sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gae104c411fd7a04ad6265a85d48ddc3a5"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteDblsize" ref="gae104c411fd7a04ad6265a85d48ddc3a5" args="(screen, obj, dblsize)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpriteDblsize</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">dblsize&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr0 = (PA_obj[screen][obj].atr0 &amp; ALL_BUT(DBLSIZE)) + ((dblsize) &lt;&lt; 9)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable or disable double size for a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dblsize</em>&nbsp;</td><td>1 to enable doublesize, 0 to disable it... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gafc0ed987ebc8f23b0f2ae49826f3dab8"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteDblsize" ref="gafc0ed987ebc8f23b0f2ae49826f3dab8" args="(screen, obj)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpriteDblsize</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;((PA_obj[screen][obj].atr0 &amp; DBLSIZE) &gt;&gt; 9)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the double size state for a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga26e67beb53eebad5aaa121d426a5984d"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteColors" ref="ga26e67beb53eebad5aaa121d426a5984d" args="(screen, sprite, n_colors)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpriteColors</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">sprite, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">n_colors&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_obj[screen][sprite].atr0 = (PA_obj[screen][sprite].atr0 &amp; ALL_BUT(N_COLORS)) + ((n_colors) &lt;&lt; 13)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the sprite's color mode. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>n_colors</em>&nbsp;</td><td>0 for 16 colors, 1 for 256 </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gad89fdbc2bddda4c51e91e2ba388ce484"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteColors" ref="gad89fdbc2bddda4c51e91e2ba388ce484" args="(screen, sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpriteColors</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">sprite&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;((PA_obj[screen][sprite].atr0 &amp; N_COLORS) &gt;&gt; 13)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get a sprite's color mode. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8e36dc74210832c38f6bf6864344f7a6"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteMode" ref="ga8e36dc74210832c38f6bf6864344f7a6" args="(screen, sprite, obj_mode)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpriteMode</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">sprite, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj_mode&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_obj[screen][sprite].atr0 = (PA_obj[screen][sprite].atr0 &amp; ALL_BUT(OBJ_MODE)) + ((obj_mode) &lt;&lt; 10)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the sprite's mode : 0 for normal, 1 for alpha blending, 2 for window. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_mode</em>&nbsp;</td><td>Object mode : 0 for normal, 1 for alpha blending, 2 for window ; not working yet </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8eade41cc18bc24efbda6a25703cce3d"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteMode" ref="ga8eade41cc18bc24efbda6a25703cce3d" args="(screen, obj)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpriteMode</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;((PA_obj[screen][obj].atr0 &amp; OBJ_MODE) &gt;&gt; 10)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the sprite's mode : 0 for normal, 1 for alpha blending, 2 for window. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga1257268cb4fd90c31da4f2eaac4f5540"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteMosaic" ref="ga1257268cb4fd90c31da4f2eaac4f5540" args="(screen, obj, mosaic)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpriteMosaic</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">mosaic&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr0 = (PA_obj[screen][obj].atr0 &amp; ALL_BUT(OBJ_MOSAIC)) + ((mosaic) &lt;&lt; 12)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable or disable mosaic mode for a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>mosaic</em>&nbsp;</td><td>Set mosaic on (1) or off (0) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaf7007fc7025218586ca19aec5e2dd5b6"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteMosaic" ref="gaf7007fc7025218586ca19aec5e2dd5b6" args="(screen, obj)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpriteMosaic</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;((PA_obj[screen][obj].atr0 &amp; OBJ_MOSAIC) &gt;&gt; 12)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the mosaic mode for a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga641750a4e110a0baf38906fb3082a51d"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteHflip" ref="ga641750a4e110a0baf38906fb3082a51d" args="(screen, obj, hflip)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpriteHflip</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">hflip&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr1 = (PA_obj[screen][obj].atr1 &amp; ALL_BUT(OBJ_HFLIP)) + ((hflip) &lt;&lt; 12)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable or disable horizontal flip for a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>hflip</em>&nbsp;</td><td>Horizontal flip, 1 to enable, 0 to disable... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga953acb0052af2a3ac0f6e375295fdb85"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteHflip" ref="ga953acb0052af2a3ac0f6e375295fdb85" args="(screen, obj)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpriteHflip</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;((PA_obj[screen][obj].atr1 &amp; OBJ_HFLIP) &gt;&gt; 12)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the horizontal flip state for a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga1613e9822383100508d2e5cbdeb1e774"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteVflip" ref="ga1613e9822383100508d2e5cbdeb1e774" args="(screen, obj, vflip)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpriteVflip</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vflip&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr1 = (PA_obj[screen][obj].atr1 &amp; ALL_BUT(OBJ_VFLIP)) + ((vflip) &lt;&lt; 13)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable or disable vertical flip for a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vflip</em>&nbsp;</td><td>Vertical flip, 1 to enable, 0 to disable... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3855089c9cf41b39babe471ff20e8a2c"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteVflip" ref="ga3855089c9cf41b39babe471ff20e8a2c" args="(screen, obj)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpriteVflip</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;((PA_obj[screen][obj].atr1 &amp; OBJ_VFLIP) &gt;&gt; 13)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the vertical flip state for a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gac0a3dab3f8cd7458a2c6bac496f11457"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteGfx" ref="gac0a3dab3f8cd7458a2c6bac496f11457" args="(screen, obj, gfx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpriteGfx</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gfx&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr2 = (PA_obj[screen][obj].atr2 &amp; ALL_BUT(OBJ_GFX)) + ((gfx) &amp; OBJ_GFX)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the gfx used by a sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>gfx</em>&nbsp;</td><td>Gfx number ; you can get one by using PA_CreateGfx or <a class="el" href="a00083.htm#ga3909b4feb83bc29337e3d9ea8999aa5d" title="Get the gfx used by a sprite.">PA_GetSpriteGfx(obj_number)</a>; </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3909b4feb83bc29337e3d9ea8999aa5d"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteGfx" ref="ga3909b4feb83bc29337e3d9ea8999aa5d" args="(screen, obj)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpriteGfx</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;(PA_obj[screen][obj].atr2 &amp; OBJ_GFX)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the gfx used by a sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga89eae5f07d1eadd3c14dde5c8fe56a5d"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpritePrio" ref="ga89eae5f07d1eadd3c14dde5c8fe56a5d" args="(screen, obj, prio)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_SetSpritePrio</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">prio&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_obj[screen][obj].atr2 = (PA_obj[screen][obj].atr2 &amp; ALL_BUT(OBJ_PRIO)) + ((prio) &lt;&lt; 10)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set a sprite's Background priority. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>prio</em>&nbsp;</td><td>Sprite priority : 0 is over background 0, 1 over Bg 1, etc... (0-3) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gae9f78a08ec4ce948cbf77cdd5486cd29"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpritePrio" ref="gae9f78a08ec4ce948cbf77cdd5486cd29" args="(screen, obj)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpritePrio</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;((PA_obj[screen][obj].atr2 &amp; OBJ_PRIO) &gt;&gt; 10)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get a sprite's Background priority. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8b3a167e67ef84d36ce6b8a1d100c1ef"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteLx" ref="ga8b3a167e67ef84d36ce6b8a1d100c1ef" args="(screen, sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpriteLx</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">sprite&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_size[PA_obj[screen][sprite].atr0 &gt;&gt; 14][PA_obj[screen][sprite].atr1 &gt;&gt; 14].lx</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get a sprite's length. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga6eb6db7837dfc5b7c7aefb30e0f4f680"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteLy" ref="ga6eb6db7837dfc5b7c7aefb30e0f4f680" args="(screen, sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_GetSpriteLy</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">sprite&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;PA_size[PA_obj[screen][sprite].atr0 &gt;&gt; 14][PA_obj[screen][sprite].atr1 &gt;&gt; 14].ly</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get a sprite's height. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gabd11e15d7f6a467c62fbd99b3e1376a5"></a><!-- doxytag: member="PA_Sprite.h::PA_CloneSprite" ref="gabd11e15d7f6a467c62fbd99b3e1376a5" args="(screen, obj, target)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define PA_CloneSprite</td>
          <td>(</td>
          <td class="paramtype">screen, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">obj, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">target&nbsp;</td>
          <td class="paramname"></td>
          <td>&nbsp;)&nbsp;</td>
          <td>&nbsp;&nbsp;&nbsp;do{PA_obj[screen][obj].atr0 = PA_obj[screen][target].atr0; PA_obj[screen][obj].atr1 = PA_obj[screen][target].atr1; PA_obj[screen][obj].atr2 = PA_obj[screen][target].atr2; ++obj_per_gfx[screen][PA_GetSpriteGfx(screen, target)];}while(0)</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clone a sprite. Works only for sprites on the same screen. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>target</em>&nbsp;</td><td>Target sprite to clone </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="ga13cf9bfdba81fd1db52c36657c86a485"></a><!-- doxytag: member="PA_Sprite.h::PA_CreateGfx" ref="ga13cf9bfdba81fd1db52c36657c86a485" args="(u8 screen, void *obj_data, u8 obj_shape, u8 obj_size, u8 color_mode)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">u16 PA_CreateGfx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>color_mode</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Load in mémory a gfx to use later on for a sprite. Returns the gfx's number in memory. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color_mode</em>&nbsp;</td><td>256 or 16 color mode (1 or 0), or 2 for 16bit </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga05570138656aa3a73734aca8919c1238"></a><!-- doxytag: member="PA_Sprite.h::PA_CreateSprite" ref="ga05570138656aa3a73734aca8919c1238" args="(u8 screen, u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_CreateSprite </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>color_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>palette</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a sprite with it's gfx. This is the simple version of the function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color_mode</em>&nbsp;</td><td>256 or 16 color mode (1 or 0). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>palette</em>&nbsp;</td><td>Palette to use (0-15). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3b0f095178b1e1acae2f1d20eec8872d"></a><!-- doxytag: member="PA_Sprite.h::PA_CreateSpriteEx" ref="ga3b0f095178b1e1acae2f1d20eec8872d" args="(u8 screen, u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, u8 obj_mode, u8 mosaic, u8 hflip, u8 vflip, u8 prio, u8 dblsize, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_CreateSpriteEx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>color_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>palette</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>mosaic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>hflip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>vflip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>prio</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>dblsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a sprite with it's gfx. This is the complex version of the function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color_mode</em>&nbsp;</td><td>256 or 16 color mode (1 or 0). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>palette</em>&nbsp;</td><td>Palette to use (0-15). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_mode</em>&nbsp;</td><td>Object mode (normal, transparent, window). Not functionnal yet, please leave to 0 for now </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>mosaic</em>&nbsp;</td><td>Activate Mosaic for the sprite or not. Not yet functionnal either :p </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>hflip</em>&nbsp;</td><td>Horizontal flip on or off... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vflip</em>&nbsp;</td><td>Vertical flip... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>prio</em>&nbsp;</td><td>Sprite priority regarding backgrounds : in front of which background to show it (0-3) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dblsize</em>&nbsp;</td><td>Double the possible sprite size. Activate only if you are going to rotate and zoom in the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaa072e101af8b55bf5b3acd763a760f0e"></a><!-- doxytag: member="PA_Sprite.h::PA_Create16bitSpriteEx" ref="gaa072e101af8b55bf5b3acd763a760f0e" args="(u8 screen, u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, u8 mosaic, u8 hflip, u8 vflip, u8 prio, u8 dblsize, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_Create16bitSpriteEx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>mosaic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>hflip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>vflip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>prio</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>dblsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a 16 bit sprite with it's gfx. This is the complex version of the function. Warning : a 16bit sprite MUST be 128 pixels large, even if you sprite only takes up a small part on the left... </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>mosaic</em>&nbsp;</td><td>Activate Mosaic for the sprite or not. Not yet functionnal either :p </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>hflip</em>&nbsp;</td><td>Horizontal flip on or off... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vflip</em>&nbsp;</td><td>Vertical flip... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>prio</em>&nbsp;</td><td>Sprite priority regarding backgrounds : in front of which background to show it (0-3) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dblsize</em>&nbsp;</td><td>Double the possible sprite size. Activate only if you are going to rotate and zoom in the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga2cba920c548e6ff70d5109f1c4d5d8a7"></a><!-- doxytag: member="PA_Sprite.h::PA_Create16bitSpriteFromGfx" ref="ga2cba920c548e6ff70d5109f1c4d5d8a7" args="(u8 screen, u8 obj_number, u16 gfx, u8 obj_shape, u8 obj_size, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_Create16bitSpriteFromGfx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>gfx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a 16 bit sprite using a given gfx. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>gfx</em>&nbsp;</td><td>Gfx to use </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gab85ac8d33f4ae13239d7a0695d061bbd"></a><!-- doxytag: member="PA_Sprite.h::PA_Create16bitSprite" ref="gab85ac8d33f4ae13239d7a0695d061bbd" args="(u8 screen, u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_Create16bitSprite </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a 16 bit sprite with it's gfx. This is the simple version of the function. Warning : a 16bit sprite MUST be 128 pixels large, even if you sprite only takes up a small part on the left... </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gada596d72c45c5a13ebbc43ebb0eab2bd"></a><!-- doxytag: member="PA_Sprite.h::PA_CreateSpriteFromGfx" ref="gada596d72c45c5a13ebbc43ebb0eab2bd" args="(u8 screen, u8 obj_number, u16 obj_gfx, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_CreateSpriteFromGfx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>obj_gfx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>color_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>palette</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a sprite with it's gfx. This is the simple version of the function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_gfx</em>&nbsp;</td><td>Memory gfx to use. Get it by using PA_GetSpriteGfx or PA_CreateGfx </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color_mode</em>&nbsp;</td><td>256 or 16 color mode (1 or 0). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>palette</em>&nbsp;</td><td>Palette to use (0-15). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga7dca775c46a92ce757d7e66eef3519a0"></a><!-- doxytag: member="PA_Sprite.h::PA_CreateSpriteExFromGfx" ref="ga7dca775c46a92ce757d7e66eef3519a0" args="(u8 screen, u8 obj_number, u16 obj_gfx, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, u8 obj_mode, u8 mosaic, u8 hflip, u8 vflip, u8 prio, u8 dblsize, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_CreateSpriteExFromGfx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>obj_gfx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>color_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>palette</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>mosaic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>hflip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>vflip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>prio</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>dblsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a sprite with it's gfx. This is the complex version of the function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_gfx</em>&nbsp;</td><td>Memory gfx to use. Get it by using PA_GetSpriteGfx or PA_CreateGfx </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color_mode</em>&nbsp;</td><td>256 or 16 color mode (1 or 0). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>palette</em>&nbsp;</td><td>Palette to use (0-15). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_mode</em>&nbsp;</td><td>Object mode (normal, transparent, window). Not functionnal yet, please leave to 0 for now </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>mosaic</em>&nbsp;</td><td>Activate Mosaic for the sprite or not. Not yet functionnal either :p </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>hflip</em>&nbsp;</td><td>Horizontal flip on or off... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vflip</em>&nbsp;</td><td>Vertical flip... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>prio</em>&nbsp;</td><td>Sprite priority regarding backgrounds : in front of which background to show it (0-3) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dblsize</em>&nbsp;</td><td>Double the possible sprite size. Activate only if you are going to rotate and zoom in the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga88e16910768adeb8056bb60d2d29f891"></a><!-- doxytag: member="PA_Sprite.h::PA_UpdateGfx" ref="ga88e16910768adeb8056bb60d2d29f891" args="(u8 screen, u16 gfx_number, void *obj_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_UpdateGfx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>gfx_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Update a given Gfx. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>gfx_number</em>&nbsp;</td><td>Gfx number in memory </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga23a2c8037e2019ce5037b33bce6d4577"></a><!-- doxytag: member="PA_Sprite.h::PA_UpdateGfxAndMem" ref="ga23a2c8037e2019ce5037b33bce6d4577" args="(u8 screen, u8 gfx_number, void *obj_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_UpdateGfxAndMem </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>gfx_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Update the Gfx of a given sprite and updates the PAlib animation pointer... Only for advanced users. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>gfx_number</em>&nbsp;</td><td>Gfx number in memory </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gacbfc3e66ceaa548e28899810ae08d26c"></a><!-- doxytag: member="PA_Sprite.h::PA_DeleteGfx" ref="gacbfc3e66ceaa548e28899810ae08d26c" args="(u8 screen, u16 obj_gfx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PA_DeleteGfx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>obj_gfx</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete a given Gfx. If a sprite uses this gfx, it'll become invisible. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_gfx</em>&nbsp;</td><td>Gfx number in memory </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3b88f09871c225c80273a8d4a55c37f2"></a><!-- doxytag: member="PA_Sprite.h::PA_DeleteSprite" ref="ga3b88f09871c225c80273a8d4a55c37f2" args="(u8 screen, u8 obj_number)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PA_DeleteSprite </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete a given sprite. If it is the only one to use it's gfx, it'll be deleted too. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Sprite number </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga96c55f780814e3795091d5f2f19039dc"></a><!-- doxytag: member="PA_Sprite.h::PA_SetRotset" ref="ga96c55f780814e3795091d5f2f19039dc" args="(u8 screen, u8 rotset, s16 angle, u16 zoomx, u16 zoomy)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_SetRotset </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>rotset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>zoomx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>zoomy</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Rotate and zoom a sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rotset</em>&nbsp;</td><td>Rotset you want to change. To give a sprite a rotset, use PA_SetSpriteRotEnable... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>angle</em>&nbsp;</td><td>Angle, between 0 and 512 (not 360, be carefull) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>zoomx</em>&nbsp;</td><td>Horizontal zoom. 256 is unzoomed, 512 is 2 times smaller, and 128 twice as big... So adjust at will ! :p </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>zoomy</em>&nbsp;</td><td>Vertical zoom. 256 is unzoomed, 512 is 2 times smaller, and 128 twice as big... So adjust at will ! :p </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga1b4c5e9c99eb920e7dfea8655ffb7e26"></a><!-- doxytag: member="PA_Sprite.h::PA_SetRotsetNoZoom" ref="ga1b4c5e9c99eb920e7dfea8655ffb7e26" args="(u8 screen, u8 rotset, s16 angle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_SetRotsetNoZoom </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>rotset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>angle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Rotate a sprite without zooming. It's a bit faster than the normal PA_SetRotset function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rotset</em>&nbsp;</td><td>Rotset you want to change. To give a sprite a rotset, use PA_SetSpriteRotEnable... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>angle</em>&nbsp;</td><td>Angle, between 0 and 512 (not 360, be carefull) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8ea10687078034829fa34f6c0ba94230"></a><!-- doxytag: member="PA_Sprite.h::PA_SetRotsetNoAngle" ref="ga8ea10687078034829fa34f6c0ba94230" args="(u8 screen, u8 rotset, u16 zoomx, u16 zoomy)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_SetRotsetNoAngle </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>rotset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>zoomx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>zoomy</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Zoom a sprite without rotating. It's a bit faster than the normal PA_SetRotset function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rotset</em>&nbsp;</td><td>Rotset you want to change. To give a sprite a rotset, use PA_SetSpriteRotEnable... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>zoomx</em>&nbsp;</td><td>Horizontal zoom. 256 is unzoomed, 512 is 2 times smaller, and 128 twice as big... So adjust at will ! :p </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>zoomy</em>&nbsp;</td><td>Vertical zoom. 256 is unzoomed, 512 is 2 times smaller, and 128 twice as big... So adjust at will ! :p </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaef15696c0dd605ad75a62cbd65c7b29e"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteXY" ref="gaef15696c0dd605ad75a62cbd65c7b29e" args="(u8 screen, u8 sprite, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_SetSpriteXY </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the X and Y position of a sprite on screen. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>X position </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga33716b4c909e9c4bdd1437bb0609061e"></a><!-- doxytag: member="PA_Sprite.h::PA_Set16bitSpriteAlpha" ref="ga33716b4c909e9c4bdd1437bb0609061e" args="(u8 screen, u8 sprite, u8 alpha)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_Set16bitSpriteAlpha </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>alpha</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the X position of a sprite on screen. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Object number in the sprite system, only for 16bit sprites </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>alpha</em>&nbsp;</td><td>Alpha parameter, 0-15 </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gac509a7d706fcc58b51c111fdf2da1717"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteAnimEx" ref="gac509a7d706fcc58b51c111fdf2da1717" args="(u8 screen, u8 sprite, u8 lx, u8 ly, u8 ncolors, s16 animframe)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_SetSpriteAnimEx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>lx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>ly</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>ncolors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>animframe</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the animation frame for a given sprite. This function is faster than the normal PA_SetSpriteAnim because it doesn't have to lookup the sprite dimensions... </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lx</em>&nbsp;</td><td>Sprite width (8, 16, 32, 64) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ly</em>&nbsp;</td><td>Sprite height (8, 16, 32, 64) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ncolors</em>&nbsp;</td><td>Sprite color mode (0 for 16 colors, 1 for 256) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>animframe</em>&nbsp;</td><td>Sprite animation frame (0, 1, 2, etc...) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaf1cffc1e800370adf500daebffe25a69"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteAnim" ref="gaf1cffc1e800370adf500daebffe25a69" args="(u8 screen, u8 sprite, s16 animframe)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_SetSpriteAnim </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>animframe</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the animation frame for a given sprite. Same as PA_SetSpriteAnimEx, but a bit slower and easier to use... </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>animframe</em>&nbsp;</td><td>Sprite animation frame (0, 1, 2, etc...) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gafa1f236952d1e40c23193851c0b46ccd"></a><!-- doxytag: member="PA_Sprite.h::PA_StartSpriteAnimEx" ref="gafa1f236952d1e40c23193851c0b46ccd" args="(u8 screen, u8 sprite, s16 firstframe, s16 lastframe, s16 speed, u8 type, s16 ncycles)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PA_StartSpriteAnimEx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>firstframe</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>lastframe</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>speed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>ncycles</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Start a sprite animation. Once started, it continues on and on by itself until you stop it ! </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>firstframe</em>&nbsp;</td><td>First frame of the animation sequence, most of the time 0... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lastframe</em>&nbsp;</td><td>Last frame to be displayed. When it gets there, it loops back to the first frame </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>speed</em>&nbsp;</td><td>Speed, in frames per second. So speed 1 would mean 1 image per second, so 1 image every game frame </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>Defines how you want it to loop. ANIM_LOOP (0) for a normal loop, ANIM_UPDOWN (1) for back and forth animation. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ncycles</em>&nbsp;</td><td>Number of animation cycles before stopping. If using ANIM_UPDOWN, it takes 2 cycles to come back to the original image </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaca4b18fa7d37c2744d57fc5da5835e85"></a><!-- doxytag: member="PA_Sprite.h::PA_StartSpriteAnim" ref="gaca4b18fa7d37c2744d57fc5da5835e85" args="(u8 screen, u8 sprite, s16 firstframe, s16 lastframe, s16 speed)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_StartSpriteAnim </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>firstframe</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>lastframe</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>speed</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Start a sprite animation. Once started, it continues on and on by itself until you stop it ! </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>firstframe</em>&nbsp;</td><td>First frame of the animation sequence, most of the time 0... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lastframe</em>&nbsp;</td><td>Last frame to be displayed. When it gets there, it loops back to the first frame </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>speed</em>&nbsp;</td><td>Speed, in frames per second. So speed 1 would mean 1 image per second, so 1 image every game frame </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaefe061359c24cf2588e01b200b371b5c"></a><!-- doxytag: member="PA_Sprite.h::PA_StopSpriteAnim" ref="gaefe061359c24cf2588e01b200b371b5c" args="(u8 screen, u8 sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_StopSpriteAnim </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Stop a sprite animation. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaff827bf845286008236f274b37ee9097"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteAnimFrame" ref="gaff827bf845286008236f274b37ee9097" args="(u8 screen, u8 sprite, u16 frame)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_SetSpriteAnimFrame </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>frame</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the current animation frame number. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>frame</em>&nbsp;</td><td>Frame number to use... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga463e0bc7b7e19b60269325683db64175"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteAnimFrame" ref="ga463e0bc7b7e19b60269325683db64175" args="(u8 screen, u8 sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline u16 PA_GetSpriteAnimFrame </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns the current animation frame number. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga43148441badd806ed1594f667b209c3b"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteAnimSpeed" ref="ga43148441badd806ed1594f667b209c3b" args="(u8 screen, u8 sprite, s16 speed)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_SetSpriteAnimSpeed </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>speed</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the current animation speed. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>speed</em>&nbsp;</td><td>Speed, in fps... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga002e5018b8bf9d4ad7d1dfa767582bb7"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteAnimSpeed" ref="ga002e5018b8bf9d4ad7d1dfa767582bb7" args="(u8 screen, u8 sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline u16 PA_GetSpriteAnimSpeed </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns the current animation speed. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga6eab2231b721179cb937b35ee9a35f0c"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpriteNCycles" ref="ga6eab2231b721179cb937b35ee9a35f0c" args="(u8 screen, u8 sprite, s32 NCycles)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_SetSpriteNCycles </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s32&nbsp;</td>
          <td class="paramname"> <em>NCycles</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the current animation cycles left (-1 for inifinite loop). </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>NCycles</em>&nbsp;</td><td>Number of cycles </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaaa6f8dcb3b353b6b15c480da76e69264"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpriteNCycles" ref="gaaa6f8dcb3b353b6b15c480da76e69264" args="(u8 screen, u8 sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline s32 PA_GetSpriteNCycles </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns the current number of animation cycles left. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaf68e20aaed1ee31181d26941497ca9ec"></a><!-- doxytag: member="PA_Sprite.h::PA_SpriteAnimPause" ref="gaf68e20aaed1ee31181d26941497ca9ec" args="(u8 screen, u8 sprite, u8 pause)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline u16 PA_SpriteAnimPause </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>pause</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Pause or UnPause a sprite animation. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pause</em>&nbsp;</td><td>1 for pause, 0 for unpause </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gad40eed67710c43a29b26e962a7f124cc"></a><!-- doxytag: member="PA_Sprite.h::PA_SetSpritePixel" ref="gad40eed67710c43a29b26e962a7f124cc" args="(u8 screen, u8 sprite, u8 x, u8 y, u8 color)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_SetSpritePixel </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>color</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set a sprite's pixel to a given palette color. Like PA_SetSpritePixelEx, with less options, but a little slower. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X coordinate of the pixel to change </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y coordinate of the pixel to change </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color</em>&nbsp;</td><td>New palette color to put </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaba5d15cacf2e1d249f6a58f7c7d762b5"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSpritePixel" ref="gaba5d15cacf2e1d249f6a58f7c7d762b5" args="(u8 screen, u8 sprite, u8 x, u8 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline u8 PA_GetSpritePixel </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get a sprite's pixel color. Like PA_GetSpritePixelEx, with less options, but a little slower. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X coordinate of the pixel </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y coordinate of the pixel </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga35441e6e7c0dba9729f158fdd2dc0f7a"></a><!-- doxytag: member="PA_Sprite.h::PA_GetSprite16cPixel" ref="ga35441e6e7c0dba9729f158fdd2dc0f7a" args="(u8 screen, u8 sprite, u8 x, u8 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline u8 PA_GetSprite16cPixel </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get a 16 color sprite's pixel color. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X coordinate of the pixel </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y coordinate of the pixel </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gacb883c2266c143cded7f6ba59dedc748"></a><!-- doxytag: member="PA_Sprite.h::PA_InitSpriteDraw" ref="gacb883c2266c143cded7f6ba59dedc748" args="(u8 screen, u8 sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PA_InitSpriteDraw </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>screen</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialise a sprite to be able to draw on it ! </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>screen</em>&nbsp;</td><td>Chose de screen (0 or 1) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Sprite number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga20c40365581c33a701a95870432f97c7"></a><!-- doxytag: member="PA_Sprite.h::PA_InitSpriteExtPrio" ref="ga20c40365581c33a701a95870432f97c7" args="(u8 SpritePrio)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void PA_InitSpriteExtPrio </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>SpritePrio</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable the PAlib sprite priority system. Slower than the normal priority system, but offering 256 levels of priority for the sprites (overrides the sprite number's priority). </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>SpritePrio</em>&nbsp;</td><td>1 for on, 0 for off... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Jul 7 21:07:35 2010 for PAlib by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
