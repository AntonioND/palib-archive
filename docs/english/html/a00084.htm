<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>PAlib: Sprite system for Dual Screen</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<!-- Generated by Doxygen 1.6.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="pages.htm"><span>Related&nbsp;Pages</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Data&nbsp;Structures</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>Sprite system for Dual Screen</h1><table border="0" cellpadding="0" cellspacing="0">
<tr><td colspan="2"><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#gaeae16d8c63a575a5fb2322c90a9ae15a">PA_SetScreenSpace</a> (s16 ScreenSpace)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the space between the 2 screens for the Dual Fonctions. 48 pixels by default.  <a href="#gaeae16d8c63a575a5fb2322c90a9ae15a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#gadf06cbb50a2a1b1eb33c684190cc721b">PA_DualSetSpriteX</a> (u8 obj, s16 x)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the X position of a sprite on screen.  <a href="#gadf06cbb50a2a1b1eb33c684190cc721b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga8766a7d1cdf8bb27baa8aa58550bf0f3">PA_DualSetSpriteY</a> (u8 obj, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the Y position of a sprite on screen.  <a href="#ga8766a7d1cdf8bb27baa8aa58550bf0f3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga9b29f667e1c1d5330e5fa6f817f47ada">PA_DualSetSpriteXY</a> (u8 sprite, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the X and Y position of a sprite on screen.  <a href="#ga9b29f667e1c1d5330e5fa6f817f47ada"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga15900fbe441f181e31542186a8ada616">PA_DualCreateSprite</a> (u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a sprite with it's gfx, on 2 screens.  <a href="#ga15900fbe441f181e31542186a8ada616"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#gaeb55097e27d16dc546a3c35979afe2e1">PA_DualCreateSpriteEx</a> (u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, u8 obj_mode, u8 mosaic, u8 hflip, u8 vflip, u8 prio, u8 dblsize, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a sprite with it's gfx. This is the complex version of the function.  <a href="#gaeb55097e27d16dc546a3c35979afe2e1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga762468a4b27151f803f10bf347b2fd81">PA_DualCreate16bitSpriteEx</a> (u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, u8 mosaic, u8 hflip, u8 vflip, u8 prio, u8 dblsize, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a 16 bit sprite with it's gfx. This is the complex version of the function. Warning : a 16bit sprite MUST be 128 pixels large, even if you sprite only takes up a small part on the left...  <a href="#ga762468a4b27151f803f10bf347b2fd81"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga252ed202d243ead124d7339de833a88e">PA_DualCreate16bitSprite</a> (u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a 16 bit sprite with it's gfx. This is the simple version of the function. Warning : a 16bit sprite MUST be 128 pixels large, even if you sprite only takes up a small part on the left...  <a href="#ga252ed202d243ead124d7339de833a88e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga775cc66a76086118070a5f5943d35cc8">PA_DualCreateSpriteFromGfx</a> (u8 obj_number, u16 *obj_gfx, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a sprite with it's gfx. This is the simple version of the function.  <a href="#ga775cc66a76086118070a5f5943d35cc8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga3277476aaa875c552f73a00175bbd357">PA_DualCreateSpriteExFromGfx</a> (u8 obj_number, u16 *obj_gfx, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, u8 obj_mode, u8 mosaic, u8 hflip, u8 vflip, u8 prio, u8 dblsize, s16 x, s16 y)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create a sprite with it's gfx. This is the complex version of the function.  <a href="#ga3277476aaa875c552f73a00175bbd357"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#gaf6e78a35443f2a0549de227ca1e1a9b9">PA_DualUpdateSpriteGfx</a> (u8 obj_number, void *obj_data)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Update the Gfx of a given sprite.  <a href="#gaf6e78a35443f2a0549de227ca1e1a9b9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga71483fc3d3303b1c9d34caa4fde339c9">PA_DualUpdateGfx</a> (u16 gfx_number, void *obj_data)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Update the Gfx of a given sprite.  <a href="#ga71483fc3d3303b1c9d34caa4fde339c9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga3789f39690ee42b2c3827bd76c76596e">PA_DualDeleteSprite</a> (u8 obj_number)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Delete a given sprite. If it is the only one to use it's gfx, it'll be deleted too.  <a href="#ga3789f39690ee42b2c3827bd76c76596e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga30fb50aff71bf4b9cac43944294cc6a9">PA_DualSetSpriteRotEnable</a> (u8 sprite, u8 rotset)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate and zoom a sprite.  <a href="#ga30fb50aff71bf4b9cac43944294cc6a9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#gad6f88d54f052cd8dd2696d064567ed0c">PA_DualSetSpriteRotDisable</a> (u8 sprite)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Stop rotating and zooming a sprite.  <a href="#gad6f88d54f052cd8dd2696d064567ed0c"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga4b3702bbddde94a389dc28bdc3dbcf28">PA_DualSetRotset</a> (u8 rotset, s16 angle, u16 zoomx, u16 zoomy)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate and zoom a sprite.  <a href="#ga4b3702bbddde94a389dc28bdc3dbcf28"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#gaeb02826191b98f94462e8f6d65c8f8af">PA_DualSetRotsetNoZoom</a> (u8 rotset, s16 angle)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Rotate a sprite without zooming. It's a bit faster than the normal PA_SetRotset function.  <a href="#gaeb02826191b98f94462e8f6d65c8f8af"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga7387f9e384a6ffe52221b5cb0a87d387">PA_DualSetRotsetNoAngle</a> (u8 rotset, u16 zoomx, u16 zoomy)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Zoom a sprite without rotating. It's a bit faster than the normal PA_SetRotset function.  <a href="#ga7387f9e384a6ffe52221b5cb0a87d387"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga59e9c13e1db01a89a5502b5db874b6cc">PA_DualSetSpritePal</a> (u8 obj, u8 pal)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the color palette used by a sprite.  <a href="#ga59e9c13e1db01a89a5502b5db874b6cc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga3664895bfaa0ebe758251089bd45da93">PA_DualSetSpriteDblsize</a> (u8 obj, u8 dblsize)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable double size for a given sprite.  <a href="#ga3664895bfaa0ebe758251089bd45da93"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga5b7e00686b9b98063e10cd860a3038ca">PA_DualSetSpriteColors</a> (u8 sprite, u8 n_colors)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the sprite's color mode.  <a href="#ga5b7e00686b9b98063e10cd860a3038ca"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#gabce26f7cfcf86c8a4581d6999b13b4f3">PA_DualSetSpriteMode</a> (u8 sprite, u8 obj_mode)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the sprite's mode : 0 for normal, 1 for alpha blending, 2 for window.  <a href="#gabce26f7cfcf86c8a4581d6999b13b4f3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga9dada17642b310cf3a1c5bce29613d04">PA_DualSetSpriteMosaic</a> (u8 obj, u8 mosaic)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable mosaic mode for a given sprite.  <a href="#ga9dada17642b310cf3a1c5bce29613d04"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga225b0e6cdea1c3271ed23f8dfe9771b7">PA_DualSetSpriteHflip</a> (u8 obj, u8 hflip)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable horizontal flip for a given sprite.  <a href="#ga225b0e6cdea1c3271ed23f8dfe9771b7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga901c725d983b05fd68edcc33e3908c0e">PA_DualSetSpriteVflip</a> (u8 obj, u8 vflip)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Enable or disable vertical flip for a given sprite.  <a href="#ga901c725d983b05fd68edcc33e3908c0e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#gad3366c831569be2e312965c8326adede">PA_DualSetSpriteGfx</a> (u8 obj, u16 *gfx)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the gfx used by a sprite.  <a href="#gad3366c831569be2e312965c8326adede"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga804a019eb399978adbf7612188d356e2">PA_DualSetSpritePrio</a> (u8 obj, u8 prio)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set a sprite's Background priority.  <a href="#ga804a019eb399978adbf7612188d356e2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga526fb5836d251e1df48a080a26f40433">PA_DualCloneSprite</a> (u8 obj, u8 target)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clone a sprite. Works only for sprites on the same screen.  <a href="#ga526fb5836d251e1df48a080a26f40433"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#gabb303b0e6431da54ec59a1fdc7bc5ad5">PA_DualSetSpriteAnimEx</a> (u8 sprite, u8 lx, u8 ly, u8 ncolors, s16 animframe)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the animation frame for a given sprite. This function is faster than the normal PA_SetSpriteAnim because it doesn't have to lookup the sprite dimensions...  <a href="#gabb303b0e6431da54ec59a1fdc7bc5ad5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga4978ad43906db2cdfce22df8c720f755">PA_DualSetSpriteAnim</a> (u8 sprite, s16 animframe)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the animation frame for a given sprite. Same as PA_SetSpriteAnimEx, but a bit slower and easier to use...  <a href="#ga4978ad43906db2cdfce22df8c720f755"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga721a35f72d1e311af1ceb04d257cdcb5">PA_DualStartSpriteAnimEx</a> (u8 sprite, s16 firstframe, s16 lastframe, s16 speed, u8 type, s16 ncycles)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Start a sprite animation for DualSprites. Once started, it continues on and on by itself until you stop it !  <a href="#ga721a35f72d1e311af1ceb04d257cdcb5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga7380614c6844146025c7e213bc8e457d">PA_DualStartSpriteAnim</a> (u8 sprite, s16 firstframe, s16 lastframe, s16 speed)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Start a sprite animation for DualSprite. Once started, it continues on and on by itself until you stop it !  <a href="#ga7380614c6844146025c7e213bc8e457d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga034737b7f677d2042bf5f9bf47e29acd">PA_DualStopSpriteAnim</a> (u8 sprite)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Stop a sprite animation for DualSprites.  <a href="#ga034737b7f677d2042bf5f9bf47e29acd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#gaa52d7284f07d2c338be523e55713d556">PA_DualSetSpriteAnimFrame</a> (u8 sprite, u16 frame)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the current animation frame number for DualSprites.  <a href="#gaa52d7284f07d2c338be523e55713d556"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static u16&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga6a16dc0bad7a98d6545abf92d33fd2f9">PA_DualGetSpriteAnimFrame</a> (u8 sprite)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the current animation frame number for DualSprites.  <a href="#ga6a16dc0bad7a98d6545abf92d33fd2f9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#gaa404e6d6a952445dcb2ebf8da0b773eb">PA_DualSetSpriteAnimSpeed</a> (u8 sprite, s16 speed)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Set the current animation speed for DualSprites.  <a href="#gaa404e6d6a952445dcb2ebf8da0b773eb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static u16&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#gab202ad9d86fac82cb1ad6c76513dd7e3">PA_DualGetSpriteAnimSpeed</a> (u8 sprite)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the current animation speed for DualSprites.  <a href="#gab202ad9d86fac82cb1ad6c76513dd7e3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="a00084.htm#ga08ad9fd55243a7857cb255d6226b616b">PA_DualSpriteAnimPause</a> (u8 sprite, u8 pause)</td></tr>
<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Pause or UnPause a sprite animation for DualSprites.  <a href="#ga08ad9fd55243a7857cb255d6226b616b"></a><br/></td></tr>
</table>
<hr/><a name="_details"></a><h2>Detailed Description</h2>
<p>Load Sprite, move them around, rotate them... </p>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="gaeae16d8c63a575a5fb2322c90a9ae15a"></a><!-- doxytag: member="PA_SpriteDual.h::PA_SetScreenSpace" ref="gaeae16d8c63a575a5fb2322c90a9ae15a" args="(s16 ScreenSpace)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_SetScreenSpace </td>
          <td>(</td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>ScreenSpace</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the space between the 2 screens for the Dual Fonctions. 48 pixels by default. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>ScreenSpace</em>&nbsp;</td><td>Space in pixels </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gadf06cbb50a2a1b1eb33c684190cc721b"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteX" ref="gadf06cbb50a2a1b1eb33c684190cc721b" args="(u8 obj, s16 x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteX </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the X position of a sprite on screen. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga8766a7d1cdf8bb27baa8aa58550bf0f3"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteY" ref="ga8766a7d1cdf8bb27baa8aa58550bf0f3" args="(u8 obj, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteY </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the Y position of a sprite on screen. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga9b29f667e1c1d5330e5fa6f817f47ada"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteXY" ref="ga9b29f667e1c1d5330e5fa6f817f47ada" args="(u8 sprite, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteXY </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the X and Y position of a sprite on screen. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>X position </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga15900fbe441f181e31542186a8ada616"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualCreateSprite" ref="ga15900fbe441f181e31542186a8ada616" args="(u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualCreateSprite </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>color_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>palette</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a sprite with it's gfx, on 2 screens. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color_mode</em>&nbsp;</td><td>256 or 16 color mode (1 or 0). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>palette</em>&nbsp;</td><td>Palette to use (0-15). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaeb55097e27d16dc546a3c35979afe2e1"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualCreateSpriteEx" ref="gaeb55097e27d16dc546a3c35979afe2e1" args="(u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, u8 obj_mode, u8 mosaic, u8 hflip, u8 vflip, u8 prio, u8 dblsize, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualCreateSpriteEx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>color_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>palette</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>mosaic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>hflip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>vflip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>prio</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>dblsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a sprite with it's gfx. This is the complex version of the function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color_mode</em>&nbsp;</td><td>256 or 16 color mode (1 or 0). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>palette</em>&nbsp;</td><td>Palette to use (0-15). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_mode</em>&nbsp;</td><td>Object mode (normal, transparent, window). Not functionnal yet, please leave to 0 for now </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>mosaic</em>&nbsp;</td><td>Activate Mosaic for the sprite or not. Not yet functionnal either :p </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>hflip</em>&nbsp;</td><td>Horizontal flip on or off... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vflip</em>&nbsp;</td><td>Vertical flip... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>prio</em>&nbsp;</td><td>Sprite priority regarding backgrounds : in front of which background to show it (0-3) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dblsize</em>&nbsp;</td><td>Double the possible sprite size. Activate only if you are going to rotate and zoom in the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga762468a4b27151f803f10bf347b2fd81"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualCreate16bitSpriteEx" ref="ga762468a4b27151f803f10bf347b2fd81" args="(u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, u8 mosaic, u8 hflip, u8 vflip, u8 prio, u8 dblsize, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualCreate16bitSpriteEx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>mosaic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>hflip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>vflip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>prio</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>dblsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a 16 bit sprite with it's gfx. This is the complex version of the function. Warning : a 16bit sprite MUST be 128 pixels large, even if you sprite only takes up a small part on the left... </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>mosaic</em>&nbsp;</td><td>Activate Mosaic for the sprite or not. Not yet functionnal either :p </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>hflip</em>&nbsp;</td><td>Horizontal flip on or off... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vflip</em>&nbsp;</td><td>Vertical flip... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>prio</em>&nbsp;</td><td>Sprite priority regarding backgrounds : in front of which background to show it (0-3) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dblsize</em>&nbsp;</td><td>Double the possible sprite size. Activate only if you are going to rotate and zoom in the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga252ed202d243ead124d7339de833a88e"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualCreate16bitSprite" ref="ga252ed202d243ead124d7339de833a88e" args="(u8 obj_number, void *obj_data, u8 obj_shape, u8 obj_size, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualCreate16bitSprite </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a 16 bit sprite with it's gfx. This is the simple version of the function. Warning : a 16bit sprite MUST be 128 pixels large, even if you sprite only takes up a small part on the left... </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga775cc66a76086118070a5f5943d35cc8"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualCreateSpriteFromGfx" ref="ga775cc66a76086118070a5f5943d35cc8" args="(u8 obj_number, u16 *obj_gfx, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualCreateSpriteFromGfx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16 *&nbsp;</td>
          <td class="paramname"> <em>obj_gfx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>color_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>palette</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a sprite with it's gfx. This is the simple version of the function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_gfx</em>&nbsp;</td><td>Memory gfx to use. Get it by using PA_GetSpriteGfx or PA_CreateGfx </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color_mode</em>&nbsp;</td><td>256 or 16 color mode (1 or 0). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>palette</em>&nbsp;</td><td>Palette to use (0-15). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3277476aaa875c552f73a00175bbd357"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualCreateSpriteExFromGfx" ref="ga3277476aaa875c552f73a00175bbd357" args="(u8 obj_number, u16 *obj_gfx, u8 obj_shape, u8 obj_size, u8 color_mode, u8 palette, u8 obj_mode, u8 mosaic, u8 hflip, u8 vflip, u8 prio, u8 dblsize, s16 x, s16 y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualCreateSpriteExFromGfx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16 *&nbsp;</td>
          <td class="paramname"> <em>obj_gfx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_shape</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>color_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>palette</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_mode</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>mosaic</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>hflip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>vflip</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>prio</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>dblsize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Create a sprite with it's gfx. This is the complex version of the function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number you want to use (0-127 for each screen seperately). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_gfx</em>&nbsp;</td><td>Memory gfx to use. Get it by using PA_GetSpriteGfx or PA_CreateGfx </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_shape</em>&nbsp;</td><td>Object shape, from 0 to 2. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_size</em>&nbsp;</td><td>Object size. Use the OBJ_SIZE_32X32 (...) macros for object shape and obj_size... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>color_mode</em>&nbsp;</td><td>256 or 16 color mode (1 or 0). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>palette</em>&nbsp;</td><td>Palette to use (0-15). </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_mode</em>&nbsp;</td><td>Object mode (normal, transparent, window). Not functionnal yet, please leave to 0 for now </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>mosaic</em>&nbsp;</td><td>Activate Mosaic for the sprite or not. Not yet functionnal either :p </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>hflip</em>&nbsp;</td><td>Horizontal flip on or off... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vflip</em>&nbsp;</td><td>Vertical flip... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>prio</em>&nbsp;</td><td>Sprite priority regarding backgrounds : in front of which background to show it (0-3) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dblsize</em>&nbsp;</td><td>Double the possible sprite size. Activate only if you are going to rotate and zoom in the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>x</em>&nbsp;</td><td>X position of the sprite </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>y</em>&nbsp;</td><td>Y position of the sprite </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaf6e78a35443f2a0549de227ca1e1a9b9"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualUpdateSpriteGfx" ref="gaf6e78a35443f2a0549de227ca1e1a9b9" args="(u8 obj_number, void *obj_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualUpdateSpriteGfx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Update the Gfx of a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga71483fc3d3303b1c9d34caa4fde339c9"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualUpdateGfx" ref="ga71483fc3d3303b1c9d34caa4fde339c9" args="(u16 gfx_number, void *obj_data)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualUpdateGfx </td>
          <td>(</td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>gfx_number</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">void *&nbsp;</td>
          <td class="paramname"> <em>obj_data</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Update the Gfx of a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>gfx_number</em>&nbsp;</td><td>Gfx number in memory </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_data</em>&nbsp;</td><td>Gfx to load </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3789f39690ee42b2c3827bd76c76596e"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualDeleteSprite" ref="ga3789f39690ee42b2c3827bd76c76596e" args="(u8 obj_number)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualDeleteSprite </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_number</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Delete a given sprite. If it is the only one to use it's gfx, it'll be deleted too. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj_number</em>&nbsp;</td><td>Sprite number </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga30fb50aff71bf4b9cac43944294cc6a9"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteRotEnable" ref="ga30fb50aff71bf4b9cac43944294cc6a9" args="(u8 sprite, u8 rotset)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteRotEnable </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>rotset</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Rotate and zoom a sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Sprite you want to rotate </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>rotset</em>&nbsp;</td><td>Rotset you want to give to that sprite (0-31). You can apparently use a rotset for multiple sprites if zoomed/rotated identically... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gad6f88d54f052cd8dd2696d064567ed0c"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteRotDisable" ref="gad6f88d54f052cd8dd2696d064567ed0c" args="(u8 sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteRotDisable </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Stop rotating and zooming a sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Sprite you want to rotate </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga4b3702bbddde94a389dc28bdc3dbcf28"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetRotset" ref="ga4b3702bbddde94a389dc28bdc3dbcf28" args="(u8 rotset, s16 angle, u16 zoomx, u16 zoomy)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetRotset </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>rotset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>zoomx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>zoomy</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Rotate and zoom a sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>rotset</em>&nbsp;</td><td>Rotset you want to change. To give a sprite a rotset, use PA_SetSpriteRotEnable... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>angle</em>&nbsp;</td><td>Angle, between 0 and 512 (not 360, be carefull) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>zoomx</em>&nbsp;</td><td>Horizontal zoom. 256 is unzoomed, 512 is 2 times smaller, and 128 twice as big... So adjust at will ! :p </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>zoomy</em>&nbsp;</td><td>Vertical zoom. 256 is unzoomed, 512 is 2 times smaller, and 128 twice as big... So adjust at will ! :p </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaeb02826191b98f94462e8f6d65c8f8af"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetRotsetNoZoom" ref="gaeb02826191b98f94462e8f6d65c8f8af" args="(u8 rotset, s16 angle)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetRotsetNoZoom </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>rotset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>angle</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Rotate a sprite without zooming. It's a bit faster than the normal PA_SetRotset function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>rotset</em>&nbsp;</td><td>Rotset you want to change. To give a sprite a rotset, use PA_SetSpriteRotEnable... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>angle</em>&nbsp;</td><td>Angle, between 0 and 512 (not 360, be carefull) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga7387f9e384a6ffe52221b5cb0a87d387"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetRotsetNoAngle" ref="ga7387f9e384a6ffe52221b5cb0a87d387" args="(u8 rotset, u16 zoomx, u16 zoomy)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetRotsetNoAngle </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>rotset</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>zoomx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>zoomy</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Zoom a sprite without rotating. It's a bit faster than the normal PA_SetRotset function. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>rotset</em>&nbsp;</td><td>Rotset you want to change. To give a sprite a rotset, use PA_SetSpriteRotEnable... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>zoomx</em>&nbsp;</td><td>Horizontal zoom. 256 is unzoomed, 512 is 2 times smaller, and 128 twice as big... So adjust at will ! :p </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>zoomy</em>&nbsp;</td><td>Vertical zoom. 256 is unzoomed, 512 is 2 times smaller, and 128 twice as big... So adjust at will ! :p </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga59e9c13e1db01a89a5502b5db874b6cc"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpritePal" ref="ga59e9c13e1db01a89a5502b5db874b6cc" args="(u8 obj, u8 pal)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpritePal </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>pal</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the color palette used by a sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pal</em>&nbsp;</td><td>Palette number (0 - 15) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga3664895bfaa0ebe758251089bd45da93"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteDblsize" ref="ga3664895bfaa0ebe758251089bd45da93" args="(u8 obj, u8 dblsize)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteDblsize </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>dblsize</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable or disable double size for a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>dblsize</em>&nbsp;</td><td>1 to enable doublesize, 0 to disable it... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga5b7e00686b9b98063e10cd860a3038ca"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteColors" ref="ga5b7e00686b9b98063e10cd860a3038ca" args="(u8 sprite, u8 n_colors)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteColors </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>n_colors</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the sprite's color mode. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>n_colors</em>&nbsp;</td><td>0 for 16 colors, 1 for 256 </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gabce26f7cfcf86c8a4581d6999b13b4f3"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteMode" ref="gabce26f7cfcf86c8a4581d6999b13b4f3" args="(u8 sprite, u8 obj_mode)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteMode </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj_mode</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the sprite's mode : 0 for normal, 1 for alpha blending, 2 for window. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obj_mode</em>&nbsp;</td><td>Object mode : 0 for normal, 1 for alpha blending, 2 for window ; not working yet </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga9dada17642b310cf3a1c5bce29613d04"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteMosaic" ref="ga9dada17642b310cf3a1c5bce29613d04" args="(u8 obj, u8 mosaic)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteMosaic </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>mosaic</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable or disable mosaic mode for a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>mosaic</em>&nbsp;</td><td>Set mosaic on (1) or off (0) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga225b0e6cdea1c3271ed23f8dfe9771b7"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteHflip" ref="ga225b0e6cdea1c3271ed23f8dfe9771b7" args="(u8 obj, u8 hflip)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteHflip </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>hflip</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable or disable horizontal flip for a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>hflip</em>&nbsp;</td><td>Horizontal flip, 1 to enable, 0 to disable... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga901c725d983b05fd68edcc33e3908c0e"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteVflip" ref="ga901c725d983b05fd68edcc33e3908c0e" args="(u8 obj, u8 vflip)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteVflip </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>vflip</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Enable or disable vertical flip for a given sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>vflip</em>&nbsp;</td><td>Vertical flip, 1 to enable, 0 to disable... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gad3366c831569be2e312965c8326adede"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteGfx" ref="gad3366c831569be2e312965c8326adede" args="(u8 obj, u16 *gfx)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteGfx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16 *&nbsp;</td>
          <td class="paramname"> <em>gfx</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change the gfx used by a sprite. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>gfx</em>&nbsp;</td><td>Gfx number ; you can get one by using PA_CreateGfx or <a class="el" href="a00083.htm#ga3909b4feb83bc29337e3d9ea8999aa5d" title="Get the gfx used by a sprite.">PA_GetSpriteGfx(obj_number)</a>; </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga804a019eb399978adbf7612188d356e2"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpritePrio" ref="ga804a019eb399978adbf7612188d356e2" args="(u8 obj, u8 prio)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpritePrio </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>prio</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set a sprite's Background priority. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>prio</em>&nbsp;</td><td>Sprite priority : 0 is over background 0, 1 over Bg 1, etc... (0-3) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga526fb5836d251e1df48a080a26f40433"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualCloneSprite" ref="ga526fb5836d251e1df48a080a26f40433" args="(u8 obj, u8 target)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualCloneSprite </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>obj</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>target</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Clone a sprite. Works only for sprites on the same screen. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>obj</em>&nbsp;</td><td>Object number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>target</em>&nbsp;</td><td>Target sprite to clone </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gabb303b0e6431da54ec59a1fdc7bc5ad5"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteAnimEx" ref="gabb303b0e6431da54ec59a1fdc7bc5ad5" args="(u8 sprite, u8 lx, u8 ly, u8 ncolors, s16 animframe)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteAnimEx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>lx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>ly</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>ncolors</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>animframe</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the animation frame for a given sprite. This function is faster than the normal PA_SetSpriteAnim because it doesn't have to lookup the sprite dimensions... </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lx</em>&nbsp;</td><td>Sprite width (8, 16, 32, 64) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ly</em>&nbsp;</td><td>Sprite height (8, 16, 32, 64) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ncolors</em>&nbsp;</td><td>Sprite color mode (0 for 16 colors, 1 for 256) </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>animframe</em>&nbsp;</td><td>Sprite animation frame (0, 1, 2, etc...) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga4978ad43906db2cdfce22df8c720f755"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteAnim" ref="ga4978ad43906db2cdfce22df8c720f755" args="(u8 sprite, s16 animframe)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteAnim </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>animframe</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the animation frame for a given sprite. Same as PA_SetSpriteAnimEx, but a bit slower and easier to use... </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>animframe</em>&nbsp;</td><td>Sprite animation frame (0, 1, 2, etc...) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga721a35f72d1e311af1ceb04d257cdcb5"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualStartSpriteAnimEx" ref="ga721a35f72d1e311af1ceb04d257cdcb5" args="(u8 sprite, s16 firstframe, s16 lastframe, s16 speed, u8 type, s16 ncycles)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualStartSpriteAnimEx </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>firstframe</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>lastframe</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>speed</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>ncycles</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Start a sprite animation for DualSprites. Once started, it continues on and on by itself until you stop it ! </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>firstframe</em>&nbsp;</td><td>First frame of the animation sequence, most of the time 0... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lastframe</em>&nbsp;</td><td>Last frame to be displayed. When it gets there, it loops back to the first frame </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>speed</em>&nbsp;</td><td>Speed, in frames per second. So speed 1 would mean 1 image per second, so 1 image every game frame </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>type</em>&nbsp;</td><td>Defines how you want it to loop. ANIM_LOOP (0) for a normal loop, ANIM_UPDOWN (1) for back and forth animation. </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ncycles</em>&nbsp;</td><td>Number of animation cycles before stopping. If using ANIM_UPDOWN, it takes 2 cycles to come back to the original image </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga7380614c6844146025c7e213bc8e457d"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualStartSpriteAnim" ref="ga7380614c6844146025c7e213bc8e457d" args="(u8 sprite, s16 firstframe, s16 lastframe, s16 speed)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualStartSpriteAnim </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>firstframe</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>lastframe</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>speed</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Start a sprite animation for DualSprite. Once started, it continues on and on by itself until you stop it ! </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>firstframe</em>&nbsp;</td><td>First frame of the animation sequence, most of the time 0... </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>lastframe</em>&nbsp;</td><td>Last frame to be displayed. When it gets there, it loops back to the first frame </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>speed</em>&nbsp;</td><td>Speed, in frames per second. So speed 1 would mean 1 image per second, so 1 image every game frame </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga034737b7f677d2042bf5f9bf47e29acd"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualStopSpriteAnim" ref="ga034737b7f677d2042bf5f9bf47e29acd" args="(u8 sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualStopSpriteAnim </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Stop a sprite animation for DualSprites. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaa52d7284f07d2c338be523e55713d556"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteAnimFrame" ref="gaa52d7284f07d2c338be523e55713d556" args="(u8 sprite, u16 frame)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteAnimFrame </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u16&nbsp;</td>
          <td class="paramname"> <em>frame</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the current animation frame number for DualSprites. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>frame</em>&nbsp;</td><td>Frame number to use... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga6a16dc0bad7a98d6545abf92d33fd2f9"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualGetSpriteAnimFrame" ref="ga6a16dc0bad7a98d6545abf92d33fd2f9" args="(u8 sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline u16 PA_DualGetSpriteAnimFrame </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns the current animation frame number for DualSprites. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gaa404e6d6a952445dcb2ebf8da0b773eb"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSetSpriteAnimSpeed" ref="gaa404e6d6a952445dcb2ebf8da0b773eb" args="(u8 sprite, s16 speed)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSetSpriteAnimSpeed </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">s16&nbsp;</td>
          <td class="paramname"> <em>speed</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the current animation speed for DualSprites. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>speed</em>&nbsp;</td><td>Speed, in fps... </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="gab202ad9d86fac82cb1ad6c76513dd7e3"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualGetSpriteAnimSpeed" ref="gab202ad9d86fac82cb1ad6c76513dd7e3" args="(u8 sprite)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline u16 PA_DualGetSpriteAnimSpeed </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em></td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns the current animation speed for DualSprites. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ga08ad9fd55243a7857cb255d6226b616b"></a><!-- doxytag: member="PA_SpriteDual.h::PA_DualSpriteAnimPause" ref="ga08ad9fd55243a7857cb255d6226b616b" args="(u8 sprite, u8 pause)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static inline void PA_DualSpriteAnimPause </td>
          <td>(</td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>sprite</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">u8&nbsp;</td>
          <td class="paramname"> <em>pause</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [inline, static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Pause or UnPause a sprite animation for DualSprites. </p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>sprite</em>&nbsp;</td><td>sprite number in the sprite system </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>pause</em>&nbsp;</td><td>1 for pause, 0 for unpause </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div>
<hr size="1"/><address style="text-align: right;"><small>Generated on Wed Jul 7 21:07:35 2010 for PAlib by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.6.1 </small></address>
</body>
</html>
